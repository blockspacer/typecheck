cmake_minimum_required (VERSION 3.16)
project(typecheck LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(ENABLE_ASAN "Enable Address Sanitizer" OFF)
option(ENABLE_UBSAN "Enable Undefined Behaviour Sanitizer" OFF)
option(ENABLE_IWYU "Use include-what-you-use" ON)
option(ENABLE_LWYU "Use link-what-you-use" ON)
option(ENABLE_CLANG_TIDY "Use clang-tidy" ON)
option(ENABLE_CPP_CHECK "Use cppcheck" ON)

if (ENABLE_ASAN)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
	set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address")
endif()

if (ENABLE_UBSAN)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined")
	set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=undefined")
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON )
if (EXISTS "${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json")
  EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json ${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json)
endif()

include(cmake/fetch_extern.cmake)
set(BUILD_EXAMPLES OFF)
set(INSTALL_BUILD_DEPS OFF)
set(BUILD_DEPS ON)
#set(BUILD_ZLIB ON)
#set(BUILD_absl ON)
#set(BUILD_gflags ON)
#set(BUILD_glog ON)
#set(BUILD_Protobuf ON)
#set(BUILD_CoinUtils ON)
#set(BUILD_Osi ON)
#set(BUILD_Clp ON)
#set(BUILD_Cgl ON)
#set(BUILD_Cbc ON)
#set(USE_CPLEX ON)
#set(USE_SCIP ON)
#set(USE_XPRESS ON)
fetch_extern(or-tools https://github.com/google/or-tools.git 45770b833997f827d322e929b1ed4781c4e60d44)
fetch_extern(catch2 https://github.com/catchorg/Catch2 0f12995501ee01d3d2bdd9f4978bb28b5f670bab)

if (ENABLE_IWYU)
	find_program(iwyu_path NAMES include-what-you-use iwyu REQUIRED)
	message("Include-What-You-Use Enabled: ${iwyu_path}")
endif()

if (ENABLE_LWYU)
	message("Link-What-You-Use Enabled")
	set(CMAKE_LINK_WHAT_YOU_USE CACHE BOOL ON)
endif()

if (ENABLE_CPP_CHECK)
	find_program(cppcheck_path cppcheck REQUIRED)
	if (${cppcheck_path} STREQUAL "cppcheck_path-NOTFOUND")
		message(FATAL_ERROR "cppcheck not found")
	endif()
	message("CPPCheck Enabled: ${cppcheck_path}")
endif()

if (ENABLE_CLANG_TIDY)
	find_program(clang_tidy_path clang-tidy REQUIRED)
	if (${clang_tidy_path} STREQUAL "clang_tidy_path-NOTFOUND")
		message(FATAL_ERROR "clang-tidy not found")
	endif()
	message("Clang-Tidy Enabled: ${clang_tidy_path}")
endif()

file(GLOB_RECURSE SRC_FILES src/*.cpp src/*.hpp)
file(GLOB_RECURSE INC_FILES include/*.hpp)

add_library(typecheck ${SRC_FILES} ${INC_FILES})
target_include_directories(typecheck PUBLIC include)
target_link_libraries(typecheck PUBLIC ortools::ortools)

if (${cppcheck_path})
	set_property(TARGET typecheck PROPERTY CXX_CPPCHECK ${cppcheck_path})
endif()

if (${iwyu_path})
	set_property(TARGET typecheck PROPERTY CXX_INCLUDE_WHAT_YOU_USE ${iwyu_path})
endif()

if (${clang_tidy_path})
	set_property(TARGET typecheck PROPERTY CXX_CLANG_TIDY ${clang_tidy_path})
endif()

enable_testing()

add_executable(test_typecheck app/test_typecheck.cpp)
target_link_libraries(test_typecheck typecheck Catch2::Catch2)
target_include_directories(test_typecheck PRIVATE app)
add_test(typecheck test_typecheck)
